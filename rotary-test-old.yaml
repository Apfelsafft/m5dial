# yaml was mainly copied from Squall290586 from here
# https://community.home-assistant.io/t/m5stack-dial-esp32-s3-smart-rotary-knob/623518/119 
# and then adapted to my needs (substitution, colors, functionality)
 
esphome:
  name: rotary-test
  friendly_name: rotary_test
  

esp32:
  board: esp32-s3-devkitc-1
  framework:
    type: arduino

# Enable logging
logger:
   level: DEBUG

# Enable Home Assistant API
api:
  encryption:
    key: "OPSqVGQ6XPVEkarePrt8IFRLBrCf/zbPMWOePH9AKps="

ota:
  password: "2abedc7a9138fab45d13bf7da07af14c"

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Rotary-Test Fallback Hotspot"
    password: "zAbXK6NqAGhw"

captive_portal:

external_components:
  - source: github://dgaust/esphome@gc9a01
    components: [ gc9a01, ft3267 ]
    refresh: 0s    


substitutions:
  climate_id : "climate.heizung_truma_room"
  light_id : "light.wozi_1"

script:
  - id: touchscreen_display_on_script
    mode: single
    then:
      - lambda: |-
          id(mode).publish_state("lights");
      - light.turn_on:
          id: touchscreen_back_lighting
          brightness: !lambda |-
            return id(touchscreen_display_brightness).state / 100;
      - sensor.rotary_encoder.set_value:
          id: touchscreen_rotary
          value: 0
      - sensor.template.publish:
          id: climate_new_temperature
          state: !lambda |-
            return id(climate_target_temperature).state;
      - delay: 500ms
      - lambda: |-
          id(touchscreen_display_on).publish_state(true);
  - id: touchscreen_display_off_script
    mode: single
    then:
      - light.turn_off:
          id: touchscreen_back_lighting
      - lambda: |-
          id(touchscreen_display_on).publish_state(false);
      - script.execute:
          id: climate_apply_new_temperature
  - id: touchscreen_display_set_countdown
    mode: single
    then:
      - number.set:
          id: touchscreen_display_countdown
          value: !lambda |-
            return id(touchscreen_display_delay).state;
  - id: touchscreen_display_change_mode
    mode: single
    then:
      - if:
          condition:
            - lambda: |-
                return id(touchscreen_display_on).state && id(touchscreen_button_freeze_countdown).state == 0;
          then:
            - lambda: |-
                if (strcmp(id(mode).state.c_str(), "lights") == 0) {
                  id(mode).publish_state("climate");
                } else if (strcmp(id(mode).state.c_str(), "climate") == 0) {
                  id(mode).publish_state("lights");
                } else {
                  id(mode).publish_state("lights");
                }
  - id: change_display_page
    mode: single
    then:
      - display.page.show: !lambda |-
          if (strcmp(id(mode).state.c_str(), "lights") == 0) {
            return id(lights);
          } else if (strcmp(id(mode).state.c_str(), "climate") == 0) {
            return id(climate);
          } else {
            return id(lights);
          }
      - component.update: touchscreen_lcd
  - id: lights_toggle_script
    mode: single
    then:
      - if:
          condition:
            - lambda: |-
                return id(touchscreen_display_on).state;
          then:
            - homeassistant.service:
                service: light.toggle
                data:
                  entity_id: $light_id
            - logger.log: "Toggle!"
            - delay: 500ms
  - id: climate_apply_new_temperature
    mode: single
    then:
      - delay: 500ms
      - if:
          condition:
            - lambda: |-
                return !id(touchscreen_display_on).state && id(climate_new_temperature).state >= 5;
          then:
            - logger.log: "Set Temp"
            - homeassistant.service:
                service: climate.set_temperature
                data:
                  entity_id: $climate_id
                  temperature: !lambda |-
                    return id(climate_new_temperature).state;
  - id: climate_new_temperature_auto_mode
    mode: single
    then:
      - lambda: |-
          if (id(climate_new_temperature).state <= id(climate_away_temperature).state) {
            id(climate_away_script).execute();
          } else if (id(climate_new_temperature).state > id(climate_away_temperature).state && id(climate_new_temperature).state <= id(climate_sleep_temperature).state) {
            id(climate_sleep_script).execute();
          } else if (id(climate_new_temperature).state > id(climate_sleep_temperature).state && id(climate_new_temperature).state <= id(climate_home_temperature).state) {
            id(climate_home_script).execute();
          } else if (id(climate_new_temperature).state > id(climate_home_temperature).state) {
            id(climate_comfort_script).execute();
          }
        
  - id: climate_new_temperature_up_script
    mode: single
    then:
      - if:
          condition:
            - lambda: |-
                return id(touchscreen_display_on).state && (strcmp(id(mode).state.c_str(), "climate") == 0);
          then:
            - number.set: 
                id: touchscreen_button_freeze_countdown
                value: 2
            - lambda: |-
                return id(climate_new_temperature).publish_state(id(climate_new_temperature).state + 0.5);
            - lambda: |-
                return id(climate_new_temperature).publish_state((id(climate_new_temperature).state < id(climate_max_temperature).state) ? id(climate_new_temperature).state : id(climate_max_temperature).state);
            - script.execute:
                id: climate_new_temperature_auto_mode
            - component.update: touchscreen_lcd
  - id: climate_new_temperature_down_script
    mode: single
    then:
      - if:
          condition:
            - lambda: |-
                return id(touchscreen_display_on).state && (strcmp(id(mode).state.c_str(), "climate") == 0);
          then:
            - number.set: 
                id: touchscreen_button_freeze_countdown
                value: 2
            - lambda: |-
                return id(climate_new_temperature).publish_state(id(climate_new_temperature).state - 0.5);
            - lambda: |-
                return id(climate_new_temperature).publish_state((id(climate_new_temperature).state > id(climate_min_temperature).state) ? id(climate_new_temperature).state : id(climate_min_temperature).state);
            - script.execute:
                id: climate_new_temperature_auto_mode
            - component.update: touchscreen_lcd
  - id: climate_away_script
    mode: single
    then:
      - if:
          condition:
            - lambda: |-
                return id(touchscreen_display_on).state && (strcmp(id(mode).state.c_str(), "climate") == 0);
          then:
            - text_sensor.template.publish:
                id: climate_mode
                state: away
  - id: climate_sleep_script
    mode: single
    then:
      - if:
          condition:
            - lambda: |-
                return id(touchscreen_display_on).state && (strcmp(id(mode).state.c_str(), "climate") == 0);
          then:
            - text_sensor.template.publish:
                id: climate_mode
                state: sleep
  - id: climate_home_script
    mode: single
    then:
      - if:
          condition:
            - lambda: |-
                return id(touchscreen_display_on).state && (strcmp(id(mode).state.c_str(), "climate") == 0);
          then:
            - text_sensor.template.publish:
                id: climate_mode
                state: home
  - id: climate_comfort_script
    mode: single
    then:
      - if:
          condition:
            - lambda: |-
                return id(touchscreen_display_on).state && (strcmp(id(mode).state.c_str(), "climate") == 0);
          then:
            - text_sensor.template.publish:
                id: climate_mode
                state: comfort
            - number.set:
                id: climate_comfort_countdown
                value: !lambda |-
                  return id(climate_comfort_duration).state * 60;
  - id: climate_runtime
    mode: single
    then:
      - if:
          condition: 
            - lambda: |-
                return !id(touchscreen_display_on).state && id(climate_comfort_countdown).state == 0 && strcmp(id(climate_mode).state.c_str(), "away") != 0;
          then:
            - lambda: |- 
                // Variables          
                float hours = id(homeassistant_time).now().hour;
                float minutes = id(homeassistant_time).now().minute;
                hours = hours + minutes / 60;
                int day = id(homeassistant_time).now().day_of_week;

                // Change climate mode                
                if (hours > 6 and hours < 20 and (day == 1 or day == 2 or hours < 8.5 or hours > 15.5)) {
                  id(climate_mode).publish_state("home");
                } else {
                  id(climate_mode).publish_state("sleep");
                }

font:
  - file: "gfonts://Roboto"
    id: roboto20
    size: 20

  - file: "gfonts://Roboto"
    id: roboto30
    size: 30    

  - file: "gfonts://Roboto"
    id: roboto40
    size: 40

  - file: "gfonts://Roboto"
    id: roboto50
    size: 50

color:
  - id: my_red
    red: 100%
    green: 3%
    blue: 5%
  - id: my_green
    hex: 4CBB17
  - id: my_blue
    red: 3%
    green: 5%
    blue: 100%
  - id: my_yellow
    hex: FFFF00 
  - id: my_light_blue
    hex: 145DA0
  - id: my_light_red
    hex: fc6d6d
  - id: my_light_orange
    hex: FD7F20
  - id: my_light_yellow
    hex: B58B00
    #
  - id: activated_button_color
    hex: 145DA0
  - id: desactivated_button_color
    hex: AAAAAA
  - id: red
    hex: FF2800
  - id: white
    hex: FFFFFF
  - id: gray
    hex: 7A7070
  - id: orange
    hex: FA6607
  - id: dark_orange
    hex: FF8C00

image:
  #- file: "pics/bulb.jpg"
  #  id: my_bulb
  #  resize: 100x100
  - file: mdi:lightbulb
    id: lights_icon
    resize: 100x100
  - file: mdi:snowflake
    id: climate_away_mode_icon
    resize: 40x40
  - file: mdi:sleep
    id: climate_sleep_mode_icon
    resize: 40x40
  - file: mdi:home
    id: climate_home_mode_icon
    resize: 40x40    
  - file: mdi:heat-wave
    id: climate_comfort_mode_icon
    resize: 40x40
  - file: mdi:thermometer
    id: climate_thermometer_icon
    resize: 20x20
  - file: mdi:temperature-celsius
    id: climate_celcius_icon
    resize: 20x20 
  - file: mdi:fire
    id: climate_fire_icon
    resize: 40x40 

#############
# Variables #
#############
time:
  - platform: homeassistant
    id: homeassistant_time
    on_time: 
      #- seconds: 0
      #  minutes: /1
      #  then:
      #    - script.execute:
      #        id: climate_runtime
      - seconds: /1
        then:
          - if:
              condition:
                - number.in_range:
                    id: touchscreen_display_countdown
                    above: 1
              then:
                - number.decrement:
                    id: touchscreen_display_countdown
                    cycle: false
          - if:
              condition:
                - number.in_range:
                    id: touchscreen_button_freeze_countdown
                    above: 1
              then:
                - number.decrement:
                    id: touchscreen_button_freeze_countdown
                    cycle: false
       #   - if:
       #       condition:
       #         - number.in_range:
       #             id: climate_comfort_countdown
       #             above: 1
       #       then:
       #         - number.decrement:
       #             id: climate_comfort_countdown
       #             cycle: false

number:
  # Public

  - platform: template
    id: touchscreen_display_delay
    name: Durée rétro-éclairage
    icon: mdi:wrench-clock
    optimistic: true
    min_value: 0
    max_value: 60
    step: 5
    initial_value: 10

  - platform: template
    id: touchscreen_display_brightness
    name: Luminosité
    icon: mdi:brightness-6
    optimistic: true
    min_value: 0
    max_value: 100
    step: 5
    initial_value: 50

  - platform: template
    id: climate_away_temperature
    name: Température du mode "Absent"
    icon: mdi:thermometer-low
    optimistic: true
    min_value: 10
    max_value: 22
    step: 1
    initial_value: 5

  - platform: template
    id: climate_sleep_temperature
    name: Température du mode "Couché"
    icon: mdi:thermometer
    optimistic: true
    min_value: 10
    max_value: 22
    step: 1
    initial_value: 15

  - platform: template
    id: climate_home_temperature
    name: Température du mode "Maison"
    icon: mdi:thermometer
    optimistic: true
    min_value: 10
    max_value: 22
    step: 1
    initial_value: 19.5

  - platform: template
    id: climate_comfort_duration
    name: Durée du mode "Boost"
    icon: mdi:wrench-clock
    optimistic: true
    min_value: 30
    max_value: 120
    step: 5
    initial_value: 60

  - platform: template
    id: climate_comfort_temperature
    name: Température du mode "Boost"
    icon: mdi:thermometer-high
    optimistic: true
    min_value: 10
    max_value: 22
    step: 1
    initial_value: 22

  # Private

  - platform: template
    id: touchscreen_display_countdown
    internal: true
    optimistic: true
    min_value: 0
    max_value: 60
    step: 1
    initial_value: 1
    on_value_range:
      - above: 1
        then: 
          - script.execute:
              id: touchscreen_display_on_script
      - below: 0
        then: 
          - script.execute:
              id: touchscreen_display_off_script

  - platform: template
    id: touchscreen_button_freeze_countdown
    internal: true
    optimistic: true
    min_value: 0
    max_value: 2
    step: 1
    initial_value: 1

  - platform: template
    id: pi
    internal: true
    optimistic: true
    min_value: 3.14159265359
    max_value: 3.14159265360
    step: 0.00000000001
    initial_value: 3.14159265359

  - platform: template
    id: climate_icon_distance_radius
    internal: true
    optimistic: true
    min_value: 0
    max_value: 1
    step: 0.01
    initial_value: 0.6

  - platform: template
    id: climate_icon_separation_angle
    internal: true
    optimistic: true
    min_value: 30
    max_value: 60
    step: 1
    initial_value: 55

  - platform: template
    id: climate_bottom_gauge_angle
    internal: true
    optimistic: true
    min_value: 30
    max_value: 180
    step: 1
    initial_value: 70

  - platform: template
    id: climate_temperature_distance_from_center
    internal: true
    optimistic: true
    min_value: 0
    max_value: 80
    step: 1
    #lower value more to the bottom, higher value more to the top
    initial_value: 40

  - platform: template
    id: climate_comfort_countdown
    internal: true
    optimistic: true
    min_value: 0
    max_value: 10000
    step: 1
    initial_value: 1

############
# Settings #
############

#external_components:
#  - source: github://dgaust/esphome@gc9a01
#    components: 
#      - gc9a01
#      - ft3267
#    refresh: 0s
#  - source: "github://pr#6096"
#    components:
#      - display
#    refresh: 0s

spi:
  mosi_pin: GPIO5
  clk_pin: GPIO6

i2c:
  - id: bus_internal
    sda: GPIO11
    scl: GPIO12
  - id: bus_porta
    sda: 13
    scl: 15

display:
  - platform: gc9a01
    id: touchscreen_lcd
    reset_pin: GPIO8
    cs_pin: GPIO7
    dc_pin: GPIO4
    rotation: 90
    update_interval: 1h
    pages:
      - id: lights
        lambda: |-
          // Variables
          float screenheight = it.get_height();
          float screenwidth = it.get_width();
          float halfscreenheight = screenheight / 2;
          float halfscreenwidth = screenwidth / 2;
          it
            .image(
              halfscreenwidth, 
              halfscreenheight,
              lights_icon,
              ImageAlign::CENTER,
              (id(lights_switch).state) ? id(my_yellow) : id(my_light_blue));

          // Display the swith menu
          it.filled_circle(halfscreenwidth -6, 225, 3);
          it.circle(halfscreenwidth +6, 225, 3);

      - id: climate
        lambda: |-
          // Variables
          float screenheight = it.get_height();
          float screenwidth = it.get_width();
          float halfscreenheight = screenheight / 2;
          float halfscreenwidth = screenwidth / 2;
          float currentTemperatureCircleAngle = (360 - id(climate_bottom_gauge_angle).state) * ((id(climate_current_temperature).state - id(climate_min_temperature).state) / (id(climate_max_temperature).state - id(climate_min_temperature).state));
          float targetTemperatureCircleAngle = (360 - id(climate_bottom_gauge_angle).state) * ((id(climate_new_temperature).state - id(climate_min_temperature).state) / (id(climate_max_temperature).state - id(climate_min_temperature).state));
          float startAngle = id(climate_bottom_gauge_angle).state / 2;
          float firstStepAngle = (currentTemperatureCircleAngle < targetTemperatureCircleAngle) ? currentTemperatureCircleAngle : targetTemperatureCircleAngle;
          float secondStepAngle = (currentTemperatureCircleAngle > targetTemperatureCircleAngle) ? firstStepAngle : targetTemperatureCircleAngle;
          float endAngle = 360 - id(climate_bottom_gauge_angle).state;

          // Display temperature arc circle
          it
            .filled_circle(
              halfscreenwidth + (halfscreenwidth - 10) * cos((90 + startAngle) * id(pi).state / 180),
              halfscreenheight + (halfscreenheight - 10) * sin((90 + startAngle) * id(pi).state / 180), 
              5, 
              id(dark_orange));
          it
            .filled_circle(
              halfscreenwidth + (halfscreenwidth - 10) * cos((90 + startAngle + endAngle) * id(pi).state / 180),
              halfscreenheight + (halfscreenheight - 10) * sin((90 + startAngle + endAngle) * id(pi).state / 180), 
              5, 
              id(gray));

          for (int i = startAngle; i <= startAngle + firstStepAngle; i++) {
            it
              .filled_triangle(
                halfscreenwidth + (halfscreenwidth - 15) * cos((90 + i) * id(pi).state / 180),
                halfscreenheight + (halfscreenheight - 15) * sin((90 + i) * id(pi).state / 180), 
                halfscreenwidth + (halfscreenwidth - 5) * cos((90 + i) * id(pi).state / 180), 
                halfscreenheight + (halfscreenheight - 5) * sin((90 + i) * id(pi).state / 180), 
                halfscreenwidth + (halfscreenwidth - 5) * cos((90 + (i + 1)) * id(pi).state / 180), 
                halfscreenheight + (halfscreenheight - 5) * sin((90 + (i + 1)) * id(pi).state / 180), 
                id(dark_orange));
            it
              .filled_triangle(
                halfscreenwidth + (halfscreenwidth - 15) * cos((90 + i) * id(pi).state / 180),
                halfscreenheight + (halfscreenheight - 15) * sin((90 + i) * id(pi).state / 180), 
                halfscreenwidth + (halfscreenwidth - 5) * cos((90 + (i + 1)) * id(pi).state / 180), 
                halfscreenheight + (halfscreenheight - 5) * sin((90 + (i + 1)) * id(pi).state / 180), 
                halfscreenwidth + (halfscreenwidth - 15) * cos((90 + (i + 1)) * id(pi).state / 180),
                halfscreenheight + (halfscreenheight - 15) * sin((90 + (i + 1)) * id(pi).state / 180), 
                id(dark_orange));
          }
          for (int i = startAngle + firstStepAngle; i <= startAngle + secondStepAngle; i++) {
            it
              .filled_triangle(
                halfscreenwidth + (halfscreenwidth - 15) * cos((90 + i) * id(pi).state / 180),
                halfscreenheight + (halfscreenheight - 15) * sin((90 + i) * id(pi).state / 180), 
                halfscreenwidth + (halfscreenwidth - 5) * cos((90 + i) * id(pi).state / 180), 
                halfscreenheight + (halfscreenheight - 5) * sin((90 + i) * id(pi).state / 180), 
                halfscreenwidth + (halfscreenwidth - 5) * cos((90 + (i + 1)) * id(pi).state / 180), 
                halfscreenheight + (halfscreenheight - 5) * sin((90 + (i + 1)) * id(pi).state / 180), 
                id(orange));
            it
              .filled_triangle(
                halfscreenwidth + (halfscreenwidth - 15) * cos((90 + i) * id(pi).state / 180),
                halfscreenheight + (halfscreenheight - 15) * sin((90 + i) * id(pi).state / 180), 
                halfscreenwidth + (halfscreenwidth - 5) * cos((90 + (i + 1)) * id(pi).state / 180), 
                halfscreenheight + (halfscreenheight - 5) * sin((90 + (i + 1)) * id(pi).state / 180), 
                halfscreenwidth + (halfscreenwidth - 15) * cos((90 + (i + 1)) * id(pi).state / 180),
                halfscreenheight + (halfscreenheight - 15) * sin((90 + (i + 1)) * id(pi).state / 180), 
                id(orange));
          }
          for (int i = startAngle + secondStepAngle; i <= startAngle + endAngle; i++) {
            it
              .filled_triangle(
                halfscreenwidth + (halfscreenwidth - 15) * cos((90 + i) * id(pi).state / 180),
                halfscreenheight + (halfscreenheight - 15) * sin((90 + i) * id(pi).state / 180), 
                halfscreenwidth + (halfscreenwidth - 5) * cos((90 + i) * id(pi).state / 180), 
                halfscreenheight + (halfscreenheight - 5) * sin((90 + i) * id(pi).state / 180), 
                halfscreenwidth + (halfscreenwidth - 5) * cos((90 + (i + 1)) * id(pi).state / 180), 
                halfscreenheight + (halfscreenheight - 5) * sin((90 + (i + 1)) * id(pi).state / 180), 
                id(gray));
            it
              .filled_triangle(
                halfscreenwidth + (halfscreenwidth - 15) * cos((90 + i) * id(pi).state / 180),
                halfscreenheight + (halfscreenheight - 15) * sin((90 + i) * id(pi).state / 180), 
                halfscreenwidth + (halfscreenwidth - 5) * cos((90 + (i + 1)) * id(pi).state / 180), 
                halfscreenheight + (halfscreenheight - 5) * sin((90 + (i + 1)) * id(pi).state / 180), 
                halfscreenwidth + (halfscreenwidth - 15) * cos((90 + (i + 1)) * id(pi).state / 180),
                halfscreenheight + (halfscreenheight - 15) * sin((90 + (i + 1)) * id(pi).state / 180), 
                id(gray));
          }

          // Current temperature round
          it
            .filled_circle(
              halfscreenwidth + (halfscreenwidth - 10) * cos((90 + startAngle + currentTemperatureCircleAngle) * id(pi).state / 180),
              halfscreenheight + (halfscreenheight - 10) * sin((90 + startAngle + currentTemperatureCircleAngle) * id(pi).state / 180), 
              2, 
              id(white));

          // Start of the second step
          if (firstStepAngle < secondStepAngle) {
            it
              .filled_circle(
                halfscreenwidth + (halfscreenwidth - 10) * cos((90 + startAngle + firstStepAngle) * id(pi).state / 180),
                halfscreenheight + (halfscreenheight - 10) * sin((90 + startAngle + firstStepAngle) * id(pi).state / 180), 
                5, 
                id(orange));
            it
              .filled_circle(
                halfscreenwidth + (halfscreenwidth - 10) * cos((90 + startAngle + firstStepAngle) * id(pi).state / 180),
                halfscreenheight + (halfscreenheight - 10) * sin((90 + startAngle + firstStepAngle) * id(pi).state / 180), 
                2, 
                id(dark_orange));
          } 

          // Target temperature round
          it
            .filled_circle(
              halfscreenwidth + (halfscreenwidth - 10) * cos((90 + startAngle + targetTemperatureCircleAngle) * id(pi).state / 180),
              halfscreenheight + (halfscreenheight - 10) * sin((90 + startAngle + targetTemperatureCircleAngle) * id(pi).state / 180), 
              7, 
              id(orange));
          it
            .filled_circle(
              halfscreenwidth + (halfscreenwidth - 10) * cos((90 + startAngle + targetTemperatureCircleAngle) * id(pi).state / 180),
              halfscreenheight + (halfscreenheight - 10) * sin((90 + startAngle + targetTemperatureCircleAngle) * id(pi).state / 180), 
              5, 
              id(white));

          // Dislay icons
          it
            .image(
              halfscreenwidth + halfscreenwidth * id(climate_icon_distance_radius).state * cos((-90 - 1.5 * id(climate_icon_separation_angle).state) * id(pi).state / 180), 
              halfscreenheight + halfscreenheight * id(climate_icon_distance_radius).state * sin((-90 - 1.5 * id(climate_icon_separation_angle).state) *id(pi).state / 180), 
              climate_away_mode_icon, 
              ImageAlign::CENTER,
              (strcmp(id(climate_mode).state.c_str(), "away") == 0) ? id(activated_button_color) : id(desactivated_button_color));
          it
            .image(
              halfscreenwidth + halfscreenwidth * id(climate_icon_distance_radius).state * cos((-90 - 0.5 * id(climate_icon_separation_angle).state) * id(pi).state / 180), 
              halfscreenheight + halfscreenheight * id(climate_icon_distance_radius).state * sin((-90 - 0.5 * id(climate_icon_separation_angle).state) *id(pi).state / 180), 
              climate_sleep_mode_icon, 
              ImageAlign::CENTER,
              (strcmp(id(climate_mode).state.c_str(), "sleep") == 0) ? id(activated_button_color) : id(desactivated_button_color));
          it
            .image(
              halfscreenwidth + halfscreenwidth * id(climate_icon_distance_radius).state * cos((-90 + 0.5 * id(climate_icon_separation_angle).state) * id(pi).state / 180), 
              halfscreenheight + halfscreenheight * id(climate_icon_distance_radius).state * sin((-90 + 0.5 * id(climate_icon_separation_angle).state) *id(pi).state / 180), 
              climate_home_mode_icon, 
              ImageAlign::CENTER,
              (strcmp(id(climate_mode).state.c_str(), "home") == 0) ? id(activated_button_color) : id(desactivated_button_color));
          it
            .image(
              halfscreenwidth + halfscreenwidth * id(climate_icon_distance_radius).state * cos((-90 + 1.5 * id(climate_icon_separation_angle).state) * id(pi).state / 180), 
              halfscreenheight + halfscreenheight * id(climate_icon_distance_radius).state * sin((-90 + 1.5 * id(climate_icon_separation_angle).state)*id(pi).state / 180), 
              climate_comfort_mode_icon, 
              ImageAlign::CENTER,
              (strcmp(id(climate_mode).state.c_str(), "comfort") == 0) ? id(activated_button_color) : id(desactivated_button_color));
 
          // Display temperature
          it.printf(halfscreenwidth, halfscreenheight - id(climate_temperature_distance_from_center).state, id(roboto50), TextAlign::TOP_CENTER, "%2.1f", id(climate_new_temperature).state, id(white));
          it.printf(halfscreenwidth, halfscreenheight - id(climate_temperature_distance_from_center).state + 55, id(roboto30), TextAlign::TOP_CENTER, "%2.1f", id(climate_current_temperature).state, id(white));
          it
            .image(
              halfscreenwidth - 50, 
              halfscreenheight - id(climate_temperature_distance_from_center).state + 62, 
              climate_thermometer_icon, 
              ImageAlign::TOP_LEFT,
              id(white));
          it
            .image(
              halfscreenwidth + 30, 
              halfscreenheight - id(climate_temperature_distance_from_center).state + 62, 
              climate_celcius_icon, 
              ImageAlign::TOP_LEFT,
              id(white));
          it
            .image(
              halfscreenwidth, 
              halfscreenheight - id(climate_temperature_distance_from_center).state + 112, 
              climate_fire_icon, 
              ImageAlign::CENTER,
              (id(climate_new_temperature).state > id(climate_current_temperature).state) ? id(red) : id(gray));

          // Display the swith menu
          it.circle(halfscreenwidth - 6, 225, 3);
          it.filled_circle(halfscreenwidth + 6, 225, 3);

touchscreen:
  platform: ft3267
  i2c_id:  bus_internal
  on_update:
    - then:
      - script.execute:
          id: touchscreen_display_set_countdown

binary_sensor:
  - platform: gpio
    pin: GPIO42
    name: Bouton
    internal: true
    filters: 
      - invert: 
    on_state: 
      - then:
        - script.execute:
            id: touchscreen_display_set_countdown
    on_press: 
      - then:
        - script.execute:
            id: touchscreen_display_change_mode

  - platform: template
    id: touchscreen_display_on
    internal: true
        
  - platform: touchscreen
    id: lights_toggle_touchscreen_button
    internal: true
    x_min: 75
    x_max: 175
    y_min: 75
    y_max: 175
    page_id: lights
    on_state: 
      then:
        - script.execute:
            id: lights_toggle_script

  - platform: homeassistant
    id: lights_switch
    entity_id: $light_id
    on_state:
      then:
        - component.update: touchscreen_lcd

  - platform: touchscreen
    id: climate_away_touchscreen_button
    internal: true
    x_min: 31
    x_max: 71
    y_min: 95
    y_max: 135
    page_id: climate
    on_state: 
      then:
        - script.execute:
            id: climate_away_script
        - sensor.template.publish:
            id: climate_new_temperature
            state: !lambda |-
              return id(climate_away_temperature).state;

  - platform: touchscreen
    id: climate_sleep_touchscreen_button
    internal: true
    x_min: 70
    x_max: 110
    y_min: 38
    y_max: 78
    page_id: climate
    on_state: 
      then:
        - script.execute:
            id: climate_sleep_script
        - sensor.template.publish:
            id: climate_new_temperature
            state: !lambda |-
              return id(climate_sleep_temperature).state;

  - platform: touchscreen
    id: climate_home_touchscreen_button
    internal: true
    x_min: 140
    x_max: 180
    y_min: 38
    y_max: 78
    page_id: climate
    on_state: 
      then:
        - script.execute:
            id: climate_home_script
        - sensor.template.publish:
            id: climate_new_temperature
            state: !lambda |-
              return id(climate_home_temperature).state;

  - platform: touchscreen
    id: climate_comfort_touchscreen_button
    internal: true
    x_min: 179
    x_max: 219
    y_min: 95
    y_max: 135
    page_id: climate
    on_state: 
      then:
        - script.execute:
            id: climate_comfort_script
        - sensor.template.publish:
            id: climate_new_temperature
            state: !lambda |-
              return id(climate_comfort_temperature).state;

sensor:
  - platform: rotary_encoder
    id: touchscreen_rotary
    internal: true
    pin_a: 
      number: GPIO40
      mode:
       input: true
       pullup: true
    pin_b: 
      number: GPIO41
      mode:
       input: true
       pullup: true
    accuracy_decimals: 0
    on_value: 
      - then:
        - script.execute:
            id: touchscreen_display_set_countdown
    on_clockwise: 
      - then:
        - script.execute:
            id: climate_new_temperature_up_script
    on_anticlockwise: 
      - then:
        - script.execute:
            id: climate_new_temperature_down_script
        
  - platform: template
    id: climate_new_temperature
    name: Nouvelle temperature

  - platform: homeassistant
    id: climate_target_temperature
    entity_id: $climate_id
    attribute: temperature
    on_value:
      then:
        - component.update: touchscreen_lcd

  - platform: homeassistant
    id: climate_current_temperature
    entity_id: $climate_id
    attribute: current_temperature
    on_value:
      then:
        - component.update: touchscreen_lcd

  - platform: homeassistant
    id: climate_min_temperature
    entity_id: $climate_id
    attribute: min_temp
    on_value:
      then:
        - component.update: touchscreen_lcd

  - platform: homeassistant
    id: climate_max_temperature
    entity_id: $climate_id
    attribute: max_temp
    on_value:
      then:
        - component.update: touchscreen_lcd

text_sensor:
  - platform: template
    id: climate_mode
    name: Mode du thermostat
    on_value:
      then:
        - component.update: touchscreen_lcd

  - platform: template
    id: mode
    name: Mode
    on_value:
      then:
        - script.execute:
            id: change_display_page

button:
  - platform: template
    id: climate_away_button
    name: Mode Absent
    on_press:
      then:
        - script.execute:
            id: climate_away_script

  - platform: template
    id: climate_sleep_button
    name: Mode Couché
    on_press:
      then:
        - script.execute:
            id: climate_sleep_script

  - platform: template
    id: climate_home_button
    name: Mode Maison
    on_press:
      then:
        - script.execute:
            id: climate_home_script

  - platform: template
    id: climate_comfort_button
    name: Mode Boost
    on_press:
      then:
        - script.execute:
            id: climate_comfort_script


light:
  - platform: monochromatic
    id: touchscreen_back_lighting
    name: Retro eclairage
    internal: true
    output: touchscreen_back_lighting_output
    default_transition_length: 500ms

output:
  - id: touchscreen_back_lighting_output
    platform: ledc
    pin: GPIO09
    max_power: 1
    min_power: 0